# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
# Home page
GET     /                           @controllers.AuthController.login()
GET     /signup                     @controllers.AuthController.signup()
GET     /login                      @controllers.AuthController.login()
GET     /logout                     @controllers.AuthController.logout()
POST    /newUser                    @controllers.AuthController.newUser()
POST    /authenticate               @controllers.AuthController.authenticate()
GET     /editProfile                @controllers.AuthController.editProfile()
POST    /editUserProfile            @controllers.AuthController.editUserProfile()
GET     /dashboard                                 controllers.Dashboard.index()
GET     /upload                                    controllers.Dashboard.uploadActivityForm()
GET     /manageLocation                              controllers.Dashboard.manageLocations()
POST    /submitactivity                            controllers.Dashboard.submitActivity()
POST    /submitlocation/:activityId               controllers.Dashboard.submitLocation(activityId: Long)


GET     /api/users                            controllers.PacemakerAPI.users()
DELETE  /api/users                            controllers.PacemakerAPI.deleteAllUsers()
POST    /api/users                            controllers.PacemakerAPI.createUser()

GET    /api/users/:id                         controllers.PacemakerAPI.user(id: Long)
DELETE /api/users/:id                         controllers.PacemakerAPI.deleteUser(id: Long)
PUT    /api/users/:id                         controllers.PacemakerAPI.updateUser(id: Long)

#User/Activity routes
GET    /api/users/:userId/activities                controllers.PacemakerAPI.activities(userId: Long)
POST   /api/users/:userId/activities                controllers.PacemakerAPI.createActivity(userId: Long)
GET    /api/users/:userId/activities/:activityId    controllers.PacemakerAPI.activity(userId: Long, activityId:Long)
DELETE /api/users/:userId/activities/:activityId    controllers.PacemakerAPI.deleteActivity(userId: Long, activityId:Long)
PUT    /api/users/:userId/activities/:activityId    controllers.PacemakerAPI.updateActivity(userId: Long, activityId:Long)

#Activity/Location routes
GET    /api/activities/:activityId/route                controllers.PacemakerAPI.locations(activityId: Long)
POST   /api/activities/:activityId/route                controllers.PacemakerAPI.createLocation(activityId: Long)
GET    /api/activities/:activityId/route/:locationId    controllers.PacemakerAPI.location(activityId:Long, locationId:Long)
DELETE /api/activities/:activityId/route/:locationId    controllers.PacemakerAPI.deleteLocation(activityId:Long, locationId:Long)
PUT    /api/activities/:activityId/route/:locationId    controllers.PacemakerAPI.updateLocation(activityId:Long, locationId:Long)
GET    /manageActivities                                @controllers.Dashboard.renderManageActivitiesPage()
GET    /editActivity/:activityId                        @controllers.Dashboard.showEditActivitiesPage(activityId: Long)
POST   /submitEditedActivity/:activityId                @controllers.PropsController.editActivity(activityId: Long)
POST   /deleteActivity/:activityId                      @controllers.PropsController.deleteActivity(activityId: Long)
GET    /manageLocations                                 @controllers.Dashboard.renderManageLocationsPage()
GET    /editLocation/:locationId                        @controllers.Dashboard.showEditLocationsPage(locationId: Long)
POST   /submitEditedLocation/:locationId                @controllers.PropsController.editLocation(locationId: Long)
POST   /deleteLocation/:locationId                      @controllers.PropsController.deleteLocation(locationId: Long)

#Friend routes
GET /follow                                 @controllers.Dashboard.getAllUsers()
POST /follow/:friendId                      @controllers.Dashboard.addFriend(friendId: Long)
GET /showFriends                            @controllers.Dashboard.showFriendsPage()
POST /unFollow/:friendId                    @controllers.Dashboard.unFriend(friendId: Long)
GET /publicProfile/:friendId                @controllers.Dashboard.showFriendsPublicProfile(friendId: Long)
GET /followRequests                         @controllers.Dashboard.showPendingFollowRequests()
POST /acceptFollowRequest/:friendId           @controllers.Dashboard.acceptFollowRequest(friendId: Long)

#Report routes
GET /reports                               @controllers.ReportController.renderActivityReportPage()
GET /byDate                                @controllers.ReportController.filterByDate()
GET /byType                                @controllers.ReportController.filterByType()
GET /byLocation                            @controllers.ReportController.filterByLocation()
GET /byDistance                            @controllers.ReportController.filterByDistance()
GET /byDuration                            @controllers.ReportController.filterByDuration()

#Map routes
GET /map                                     controllers.Dashboard.getMap()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)